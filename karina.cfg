/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
KKKKKKKKK    KKKKKKK               AAA               RRRRRRRRRRRRRRRRR   IIIIIIIIIINNNNNNNN        NNNNNNNN               AAA                            CCCCCCCCCCCCCFFFFFFFFFFFFFFFFFFFFFF        GGGGGGGGGGGGG                                1111111                000000000     
K:::::::K    K:::::K              A:::A              R::::::::::::::::R  I::::::::IN:::::::N       N::::::N              A:::A                        CCC::::::::::::CF::::::::::::::::::::F     GGG::::::::::::G                               1::::::1              00:::::::::00   
K:::::::K    K:::::K             A:::::A             R::::::RRRRRR:::::R I::::::::IN::::::::N      N::::::N             A:::::A                     CC:::::::::::::::CF::::::::::::::::::::F   GG:::::::::::::::G                              1:::::::1            00:::::::::::::00 
K:::::::K   K::::::K            A:::::::A            RR:::::R     R:::::RII::::::IIN:::::::::N     N::::::N            A:::::::A                   C:::::CCCCCCCC::::CFF::::::FFFFFFFFF::::F  G:::::GGGGGGGG::::G                              111:::::1           0:::::::000:::::::0
KK::::::K  K:::::KKK           A:::::::::A             R::::R     R:::::R  I::::I  N::::::::::N    N::::::N           A:::::::::A                 C:::::C       CCCCCC  F:::::F       FFFFFF G:::::G       GGGGGG     vvvvvvv           vvvvvvv   1::::1           0::::::0   0::::::0
  K:::::K K:::::K             A:::::A:::::A            R::::R     R:::::R  I::::I  N:::::::::::N   N::::::N          A:::::A:::::A               C:::::C                F:::::F             G:::::G                    v:::::v         v:::::v    1::::1           0:::::0     0:::::0
  K::::::K:::::K             A:::::A A:::::A           R::::RRRRRR:::::R   I::::I  N:::::::N::::N  N::::::N         A:::::A A:::::A              C:::::C                F::::::FFFFFFFFFF   G:::::G                     v:::::v       v:::::v     1::::1           0:::::0     0:::::0
  K:::::::::::K             A:::::A   A:::::A          R:::::::::::::RR    I::::I  N::::::N N::::N N::::::N        A:::::A   A:::::A             C:::::C                F:::::::::::::::F   G:::::G    GGGGGGGGGG        v:::::v     v:::::v      1::::l           0:::::0 000 0:::::0
  K:::::::::::K            A:::::A     A:::::A         R::::RRRRRR:::::R   I::::I  N::::::N  N::::N:::::::N       A:::::A     A:::::A            C:::::C                F:::::::::::::::F   G:::::G    G::::::::G         v:::::v   v:::::v       1::::l           0:::::0 000 0:::::0
  K::::::K:::::K          A:::::AAAAAAAAA:::::A        R::::R     R:::::R  I::::I  N::::::N   N:::::::::::N      A:::::AAAAAAAAA:::::A           C:::::C                F::::::FFFFFFFFFF   G:::::G    GGGGG::::G          v:::::v v:::::v        1::::l           0:::::0     0:::::0
  K:::::K K:::::K        A:::::::::::::::::::::A       R::::R     R:::::R  I::::I  N::::::N    N::::::::::N     A:::::::::::::::::::::A          C:::::C                F:::::F             G:::::G        G::::G           v:::::v:::::v         1::::l           0:::::0     0:::::0
KK::::::K  K:::::KKK    A:::::AAAAAAAAAAAAA:::::A      R::::R     R:::::R  I::::I  N::::::N     N:::::::::N    A:::::AAAAAAAAAAAAA:::::A          C:::::C       CCCCCC  F:::::F              G:::::G       G::::G            v:::::::::v          1::::l           0::::::0   0::::::0
K:::::::K   K::::::K   A:::::A             A:::::A   RR:::::R     R:::::RII::::::IIN::::::N      N::::::::N   A:::::A             A:::::A          C:::::CCCCCCCC::::CFF:::::::FF             G:::::GGGGGGGG::::G             v:::::::v        111::::::111        0:::::::000:::::::0
K:::::::K    K:::::K  A:::::A               A:::::A  R::::::R     R:::::RI::::::::IN::::::N       N:::::::N  A:::::A               A:::::A          CC:::::::::::::::CF::::::::FF              GG:::::::::::::::G              v:::::v         1::::::::::1 ......  00:::::::::::::00 
K:::::::K    K:::::K A:::::A                 A:::::A R::::::R     R:::::RI::::::::IN::::::N        N::::::N A:::::A                 A:::::A           CCC::::::::::::CF::::::::FF                GGG::::::GGG:::G               v:::v          1::::::::::1 .::::.    00:::::::::00   
KKKKKKKKK    KKKKKKKAAAAAAA                   AAAAAAARRRRRRRR     RRRRRRRIIIIIIIIIINNNNNNNN         NNNNNNNAAAAAAA                   AAAAAAA             CCCCCCCCCCCCCFFFFFFFFFFF                   GGGGGG   GGGG                vvv           111111111111 ......      000000000                                                                                                                                                                                                                                                                       
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
........................................:=*####################################*****######**+:..................................
.......................................=**################################****##############**-.................................
......................................+**############################*****###################**=................................
....................................:++**########################****#########################**=...............................
....................................++**######################*################################**+..............................
...................................=+*****##*#*##**#############################################**+.............................
..................................-+****#########*#****########*#################################**=............................
..................................++*****####*****################****#*****#####################***=...........................
.................................:++*********#*****##########################******#***#########*#***=..........................
.................................-++****************##################*################**************+-.........................
.................................-++***#************###################*#**##############*###*###****++:........................
.................................-=+**##**********#########*###########******#*#****###**#***####*****+=:.......................
.................................-=++**#*******##*#*#*##*#*#*###########************###**#****####*****==:......................
.................................:=++****++*##**++==**##***#*###########*************##*********##******--:.....................
.................................:-++*****=--*=....:+**##******##*##**###************##**********#******+=:.....................
..................................:=++***-..........=*+*#*******##*#****#**************#**************+++=-:....................
...................................-=+=+*-:......:::=**##*******##*#*********************************++**++::...................
....................................:-:-+*+-.....:+=+********#***##*#********************+*************+**+-.:..................
.......................................-***+....::..:+*=**********#**********************+******++****+++**+:::.................
.......................................+***+.........=+*=**********#*********************+****+*******+++**+=.:.................
......................................:**#*-.........:=*=++********#*********************+*++***+*****++=+*++-.:................
......................................+**#=...........==*=+***#***###*****#***********#**+++**********++=++*+=:.:...............
.....................................-***-............:=++=+***##**####***##**********#**+************++++**++=.:...............
....................................-+***-...:.........=-++-+***#######***##**********************+***++++**+++::...............
...................................-++****+=-..........:=-+==****######****#****#****###*********+****+=++**++*-.:..............
..................................:=+********:..........:=-*==*+**#####***##****#**#*###****##***+***++=++***+*=::..............
.................................:+=+********=:::::......:==++=+***####***##******######***##***+**+*+++*+***+**-:..............
.................................+-+************--:::.....:==++++****##***##*++*#**####***###*****+*+=+*+**#**+*=-..............
................................+-=+*+****#***##=::.........-+*******##********##*#####***##********=+*++*##****+=:.............
...............................=+-++*+***##*#*##**+=..........=*****#*#********#**####**###********++*+=:=-..=***=:.............
..............................-+-=+*++**#####*#####*..........:+####***********#**####*###********++**=:     :***+-.............
.............................:+=-=**+***###########*-.....:-+*######**#*******#**#*##*###***#****+***+.      .===--.............
.............................=+--+**+***############*=--=++++***##****#***##**#****#*###***#***+====-.        -**++:............
............................:+=:-**++**#############*===+====*+++++***#***#****#**#*#**+=======++++-          -**++-............
............................-+::=**+***#############+========+:---=*******#***+=====+++*##******+=:..      .. :**++=............
............................==.:+**+*#*############*=======-=:::.:+**+=+====++****######*******+-:.......      =*++=:...........
...........................:+:::+**+***############*=====----....:=+++***********#######*****=-:..             .+=+=:...........
...........................:*:::*****#*###########*=----:---:.:..=*#*+**#**#****#######***+-:.                  -=+=-...........
...........................:+::-*****#*###**++++++=-======-=....:+##***##*#***####*###*+=-:..                   .==+-...........
...........................:+-.-**+==+++++**######+--===----.:..-*##**##**#*##****+=-:..                         -==-...........
...........................:=-.:=+++***######*##+=-====---=..:..=##***#**###**+=:.                               .==-...........
............................==:.+**+****###**=-::-=====----.:..:*##**#####*=:.                                    -=:...........
............................:==.-**+****=-:...:=*=====-=-=:.:..=###*****-.                                        :=:...........
.............................---:+**+*+:...=+***+=====---=.:..:+#****+:                                           :=:...........
..............................::--**+=....+**+++=-=======:.:..=**#*+:                                             :=............
.................................:=-:....---:::=======--=.:..:+***-                                               .-............
.................................:......::::::::---===--=.:..-***:                                                .:............
.......................................:::--:...:-:.:--=:...:+**.                                                 ::............
.....................................:::-::.....:.....:-.:..-+=.                                                  :.............
.....................................::......:...:::..:..:..=+.                                                  ...............
..........................................::-.......::-.:..:-.                                                   ...............
........................................::::................::  .                                                ...............
......................................:::::..............:::=: .                                                ................
...................................:-::::........::::.........:                                                 ................
...............................:::::..:......................-                                                 .................
..............................:::.................::::...::--.                                                 .................
...................            .... -.......:..............:                                   .              ..................
................              ....  =....................::.                                   .              ..................
...............               ....  =:......:......::::..-.                                    .             ...................
.............                   ..   --....::::.......:-=.         .                                        ....................
.............                     .    ::...:---=:.::-+=:         .                                        .....................
.............                            ::--=--=..:.-+:         ..                                        .....................
..............                 ...        :----=:...:+-          .                     .                  ......................
................          ..:::..    .   .:-===+..:.==          .                     .                  ....................... 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// https://chat.whatsapp.com/HtLypvY61FBK6C5kY58cPA
ati_npatch "1.0"
ati_subdiv "2.0"
cl_gibcount "5.0"
cl_pitchspeed "225"
cl_allowdownload "1"
cl_allowupload "1"
cl_backspeed "400"
cl_cmdbackup "2"
cl_cmdrate "101"
cl_corpsestay "101"
cl_crosshair_color "255 0 255"
cl_crosshair_size "medium"
cl_crosshair_translucent "0"
cl_dlmax "128"
cl_download_ingame "1"
cl_dynamiccrosshair "0"
cl_forwardspeed "400"
cl_himodels "0"
cl_idealpitchscale "0.8"
cl_lc "1"
cl_logocolor "#Valve_Ltblue"
cl_logofile "smiley"
cl_lw "1"
cl_minmodels "1"
cl_radartype "1"
cl_righthand "1"
cl_shadows "0"
cl_timeout "35"
cl_updaterate "101"
cl_vsmoothing "0.00"
cl_weather "0"
cl_bob "0.01"
cl_bobcycle "0.8"
cl_bobup "0.5"
cl_updaterate "101"
hpk_maxsize "1.5"
cl_cmdrate "101"
cl_rate "9999"
rate "25000"
ex_maxaccel "2000"
ex_maxspeed "750"
ex_minvelocity "0"
ex_correct "0"
ex_maxerrordistance "0"
ex_extrapmax "1.33"
ex_interp "0.1"
fps_max "9999"
gl_dither "0"
gl_flipmatrix "0"
gl_fog "0"
gl_monolights "0"
gl_overbright "1"
gl_polyoffset "0.1"
gl_affinemodels "0"
gl_alphamin "0.25"
gl_clear "0"
gl_cull "1"
gl_d3dflip "1"
gl_keeptjunctions "0"
gl_lightholes "1"
gl_max_size "512"
gl_nobind "0"
gl_nocolors "0"
gl_palette_tex "1"
gl_picmip "0"
gl_playermip "1"
gl_reporttjunctions "0"
gl_round_down "5"
gl_spriteblend "0"
gl_wateramp "0"
gl_wireframe "2"
gl_zmax "4096"
gl_texturemode "GL_LINEAR_MIPMAP_LINEAR"
hud_centerid "1"
hud_draw "1"
hud_fastswitch "1"
hud_saytext_internal "1"
hud_takesshots "0"
hud_saytext_time "5"
m_filter "0"
m_forward "1"
m_pitch "0.022000"
m_side "0.8"
m_yaw "0.022"
MP3FadeTime "0.0"
MP3Volume "0"
mp_decals "0"
max_smokepuffs "120"
max_shells "120"
net_graph "3"
net_graphpos "1"
net_scale "5"
r_bmodelhighfrac "5.0"
r_detailtextures "0"
r_decals "0"
s_a3d "0"
s_automax_distance "30.0"
s_automin_distance "2.0"
s_bloat "2.0"
s_distance "60"
s_doppler "0.0"
s_eax "0"
s_leafnum "0"
s_max_distance "1000.0"
s_min_distance "8.0"
s_numpolys "200"
s_polykeep "1000000000"
s_polysize "10000000"
s_refdelay "4"
s_refgain "0.4"
s_rolloff "1.0"
s_verbwet "0.25"
s_a3d "0"
s_automax_distance "30"
s_automin_distance "2"
s_bloat "2"
s_distance "60"
s_doppler "0"
s_eax "0"
s_geometry "0"
s_leafnum "0"
s_max_distance "1000"
s_min_distance "8"
s_numpolys "200"
s_polysize "0"
s_polykeep "0"
s_reflect "0"
s_reverb "0"
s_refdelay "4"
s_refgain "0.4"
s_rolloff "1"
s_usepvs "0"
s_verbwet "0.25"
spec_autodirector_internal "1"
spec_drawcone_internal "1"
spec_drawnames_internal "1"
spec_drawstatus_internal "1"
spec_mode_internal "2"
spec_pip "0"
sv_aim "0"
sv_voiceenable "1"
sv_cheats "1"
setinfo "_vgui_menus" "1"
setinfo "_ah" "0"
voice_enable "1"
voice_forcemicrecord "1"
voice_modenable "1"
voice_scale "1"
violence_ablood "1"
violence_agibs "1"
violence_hblood "1"
violence_hgibs "1"
_cl_autowepswitch "0"
_snd_mixahead "0.1"
skin ""
+mlook
team ""
gamma "3"
volume "2"
joystick "0"
hisound "1"
crosshair "1"
console "1.0"
lookstrafe "0"
lookspring "0"
brightness "999999"
model "arctic"
fastsprites "0"
texgamma "0"
viewsize "120"
bgmvolume "1"
name ";Sr.Hs'.-"
suitvolume "0.25"
topcolor "255"
sensitivity "3.0"
con_color "255 0 255"
bottomcolor "255"
mdl clear_models
mdl new GSG9\gsg9.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
mdl new SAS\sas.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
mdl new arctic\arctic.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
mdl new gign\gign.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
mdl new guerilla\guerilla.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
mdl new leet\leet.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
mdl new terror\terror.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 19 0 0
mdl add_spot 9 0 0
mdl add_spot 42 43 0.5
mdl add_spot 48 49 0.5
mdl new urban\urban.mdl
mdl add_spot 5 6 3
mdl add_spot 5 0 0
mdl add_spot 3 0 0
mdl add_spot 20 0 0
mdl add_spot 9 0 0
mdl add_spot 44 45 0.5
mdl add_spot 50 51 0.5
vec_pistol "avclear; avadd 0 20.49 6.31 1.47;avadd 1 26.435 6.47 2.38;avadd 2 11.2 6.51 2.65; recoil 0.016"
vec_m4a1 "avclear;avadd 0 20.65 6.73 1.937;avadd 1 26.69 6.15 3.65;avadd 2 11.76 6.5 3.25; recoil 1.61"
vec_ak47 "avclear;avadd 0 21.75 6.63 3.276;avadd 1 26.85 5.85 3.45;avadd 2 11.9 6.8 2.4; txt recoil 1.73"
vec_aug "avclear;avadd 0 21.53 6.724 2.718;avadd 1 25.82 6.11 2.73;avadd 2 10.917 6.673 3.41; recoil 1.7"
vec_sg552 "avclear;avadd 0 21.53 6.724 2.718;avadd 1 25.82 6.11 2.73;avadd 2 10.917 6.673 3.41; recoil 1.7"
vec_other "avclear; avadd 0 22.05 6.61 2.013;avadd 1 25.19 6.88 3.404;avadd 2 13.244 7.11 2.31; recoil 1.71"
vec_sg550 "avclear; avadd 0 21.4533 6.42533 3.618;avadd 1 23.4 4.9 3.015; recoil .0001"
vec_g3sg1 "avclear; avadd 0 21.4533 6.42533 3.618;avadd 1 23.4 4.9 3.015; recoil .0001"
vec_scout "avclear;avadd 0 22.8389 6.92 3.34;avadd 1 30.13 4.54 3.96; recoil 1.65"
vec_awp "avclear;avadd 0 22.8389 6.92 3.34;avadd 1 30.13 4.54 3.96; recoil 1.65"
bind x "I Love You Karina <3"
type
  FFireBullet = procedure (idx: Integer; _forward, right, up: PArray3OfSingle; cShots: Integer; vecSrc, vecDirShooting: PArray3OfSingle; flDistance: Single; iBulletType, iTracerFreq: Integer; tracerCount: PInteger; flSpreadX, flSpreadY: Single);cdecl;

var
  oldFireBullet     : FFireBullet          = pointer            ($019024C0);
  newFireBullet     : FFireBullet;

procedure myFireBullet(idx: Integer; _forward, right, up: PArray3OfSingle; cShots: Integer; vecSrc, vecDirShooting: PArray3OfSingle; flDistance: Single; iBulletType, iTracerFreq: Integer; tracerCount: PInteger; flSpreadX, flSpreadY: Single);cdecl;
var
  vDir, view, target: Array[0..2] of Single;
begin

  vDir[0] := _forward[0] + flSpreadX * right[0] + flSpreadY * up[0];
	view[0] := 8192 * vDir[0];

	vDir[1] := _forward[1] + flSpreadX * right[1] + flSpreadY * up[1];
	view[1] := 8192 * vDir[1];

	vDir[2] := _forward[2] + flSpreadX * right[2] + flSpreadY * up[2];
	view[2] := 8192 * vDir[2];

  VectorUtils.VectorAngles(view,target);
  target[0] := target[0] * -1;

  me.spreadAngles.x := me.viewAngles.x - target[0];
  me.spreadAngles.y := me.viewAngles.y - target[1];
  me.spreadAngles.z := 0;

 newFireBullet(idx,_forward,right,up,cShots,vecSrc,vecDirShooting,flDistance,iBulletType,iTracerFreq,tracerCount,flSpreadX,flSpreadY);
end;

procedure CL_CreateMove(_para1:single; ucmd:usercmd_s; _para3:longint);cdecl;
begin
  gExportTable.CL_CreateMove(_para1,ucmd,_para3);
    If _nospread Then
    begin
      ucmd.viewangles.x := ucmd.viewangles.x + me.spreadAngles.x;
      ucmd.viewangles.y := ucmd.viewangles.y + me.spreadAngles.y;
      ucmd.viewangles.z := ucmd.viewangles.z + me.spreadAngles.z;
    end;
  If _norecoil then
    begin
      ucmd.viewangles.x := ucmd.viewangles.x - me.punchangle.x;
      ucmd.viewangles.y := ucmd.viewangles.y - me.punchangle.y;
    end;
end;


procedure HookClient;
begin
  While not Assigned(pExportTable.Initialize) Do
    Sleep(50);
  CopyMemory(@gExportTable,pExportTable,sizeOf(ExportTable_t));
  //...
  //....
  MyHook.Detour(@oldFireBullet,@MyFireBullet,@NewFireBullet);
end;
void ApplyNoRecoil(float Frametime, float *Punchangle, float *Viewangle)
{
    float Punch[3], Length;
    VectorCopy(Punchangle, Punch);
    Length = VectorNormalize(Punch);
    Length -= (10.0 + Length * 0.5) * Frametime;
    Length = max(Length, 0.0);
    VectorScale(Punch, Length, Punch);
    Viewangle[0] += Punch[0] + Punch[0];
    Viewangle[1] += Punch[1] + Punch[1];
}

inline void AntiPitchRecoil(float frametime, float* punchangle, float* Angles)
{
	float Punch[3], Length;
	VectorCopy(punchangle, Punch);
	Length = VectorLength(Punch);
	Length -= (10.0 + Length * 0.5) * frametime;
	Length = max(Length, 0.0);
	VectorScale(Punch, Length, Punch);
	Angles[0] -= (Punch[0] + Punch[0]);
}

//**********************************************************************************************************************************

inline void antiRecoil(float* pa, struct usercmd_s * usercmd, float frametime)
{
	if(cvar.recoil<0) cvar.recoil =0.0;	
	switch(cvar.norecoil){
		case 1:
		{   
		usercmd->viewangles[0] -= (pa[0] * cvar.recoil);
		usercmd->viewangles[1] -= (pa[1] * cvar.recoil);
		}
		break;
		case 2:
		{
		int* intcoil = (int *)0x01A17C1C;
		usercmd->viewangles[0] -= ((pa[0]) * (float)(255/(float)(*intcoil)));
		usercmd->viewangles[1] -= ((pa[1]) * (float)(255/(float)(*intcoil)));
		}
		break;
		case 3:
		{
		AntiPitchRecoil(frametime,pa,usercmd->viewangles);
		usercmd->viewangles[1] -= (pa[1] * cvar.recoil);
		}
		break;
		case 4:
		{
		float recoiladdon = 0.0f;			
		if(me.spread.recoil < 1) recoiladdon = 0.0f;
		else recoiladdon = (me.spread.recoil / 100.0f);
		usercmd->viewangles[0] -= (pa[0] * (cvar.recoil +recoiladdon));
		usercmd->viewangles[1] -= (pa[1] * (cvar.recoil +recoiladdon));
		}
		break;
		case 5:
		{
		float post_recoilmultiply = 0.0f;
		if (me.spread.recoil == 0) post_recoilmultiply = 0.0f;
		else post_recoilmultiply = ((me.spread.recoil +1)/100.0f);
		usercmd->viewangles[0] -= (pa[0] * (cvar.recoil + post_recoilmultiply));
		usercmd->viewangles[1] -= (pa[1] * (cvar.recoil + post_recoilmultiply));
		}
		break;
		default:
		break;
	}
	VectorClear(pa);//si ya se restaron, se ponen a cero
}
static int boxpnt[6][4] =
{
	{ 0, 4, 6, 2 }, // +X
	{ 0, 1, 5, 4 }, // +Y
	{ 0, 2, 3, 1 }, // +Z
	{ 7, 5, 1, 3 }, // -X
	{ 7, 3, 2, 6 }, // -Y
	{ 7, 6, 4, 5 }, // -Z
};

void CalcTriggerbot( vec3_t mins, vec3_t maxs, IPlayers * pe )
{
	int j;
	
	vec3_t tmp;
	vec3_t		p[8],q[8];
	float gap = cfg.box_gap;
	
	for (j = 0; j < 8; j++)
	{
		tmp[0] = (j & 1) ? mins[0] - gap : maxs[0] + gap;
		tmp[1] = (j & 2) ? mins[1] - gap : maxs[1] + gap ;
		tmp[2] = (j & 4) ? mins[2] - gap : maxs[2] + gap ;

		Utils::VectorCopy(tmp, p[j]);
	}

	if ( pe->GetEnt()->angles )
	{
		vec3_t forward, right, up, vPlayerAngles, vAngles;

		vAngles[0] = 0;
		vAngles[1]= pe->GetEnt()->angles[1];
		vAngles[2]=0;

		gEngine.pfnAngleVectors( vAngles, forward, right, up );

		for (j = 0; j < 8; j++) 
		{			
			Utils::VectorCopy(p[j], tmp);

			p[j][0] = DotProduct ( tmp, forward );
			p[j][1] = DotProduct ( tmp, right );
			p[j][2] = DotProduct ( tmp, up );
		}
	}

	for (j = 0; j < 8; j++)
		Utils::VectorAdd(p[j], pe->GetEnt()->origin, p[j]);

	float left	= 99999;
	float right = -99999;
	float top	= -99999;
	float bottom = 99999;

	vec3_t vTl,vTr,vBl,vBr;

	bool bOffScreen = false;

	for (j = 0; j < 6; j++)
	{
		// make sure all 6 sides of the box are visible, otherwise boxes get messy
		if( !Utils::CalcScreen( p[boxpnt[j][1]], vTl ) ||
			!Utils::CalcScreen( p[boxpnt[j][3]], vBr ) ||
			!Utils::CalcScreen( p[boxpnt[j][2]], vTr ) ||
			!Utils::CalcScreen( p[boxpnt[j][0]], vBl ) )
			bOffScreen = true;

		// calculate furthest points from player
		if( vTl[0] < left )
			left =  vTl[0];

		if( vTr[0] > right )
			right =  vTr[0];

		if( vTl[1] > top )
			top =  vTl[1];

		if( vBl[1] < bottom )
			bottom =  vBl[1];
	}

	if( !bOffScreen ) {
		
		// mouse is within target area?
		if( gEnv.centerx >= left &&
			gEnv.centerx <= right &&
			gEnv.centery >= bottom &&
			gEnv.centery <= top )
		{
			// profit!!!
		}
	}
}
#include <windows.h>
#include "SDKInclude.h"
#include "TransInclude.h"
#include "NoRecoil.h"

CNoRecoil::CNoRecoil(void)
{
}

CNoRecoil::~CNoRecoil(void)
{
}

void CNoRecoil::PredictAndFixRecoil(struct ref_params_s *pparams)
{
	memcpy(lastPunch,curPunch,sizeof(lastPunch));
	memcpy(lastAverage,curAverage,sizeof(lastAverage));
	memcpy(curPunch,pparams->punchangle,sizeof(pparams->punchangle));

	curAverage[0]=(curPunch[0]+lastPunch[0]/2);
	curAverage[2]=(curPunch[2]+lastPunch[2]/2);
	pparams->cl_viewangles[0] -= curAverage[0]-lastAverage[0];
	pparams->cl_viewangles[2] -= curAverage[2]-lastAverage[2];
}

void CNoRecoil::ResetEstimationOnAttackBail()
{
	RtlZeroMemory(curAverage,sizeof(curAverage));
	RtlZeroMemory(lastAverage,sizeof(lastAverage));
	RtlZeroMemory(curPunch,sizeof(curPunch));
	RtlZeroMemory(lastPunch,sizeof(lastPunch));
}
#pragma once

class CNoRecoil
{
public:
	CNoRecoil(void);
	~CNoRecoil(void);
	void CNoRecoil::PredictAndFixRecoil(struct ref_params_s *pparams);
	void CNoRecoil::ResetEstimationOnAttackBail();

private:
	float curPunch[3];
	float lastPunch[3];
	float curAverage[3];
	float lastAverage[3];
};
//
#include "nospread.h"
#include "weaponslist.h"

// add them...
#define WEAPONLIST_GALIL 14
#define WEAPONLIST_FAMAS 15

static unsigned int glSeed = 0; 

#define M_PI		3.14159265358979323846

unsigned int seed_table[ 256 ] =
{
	28985, 27138, 26457, 9451, 17764, 10909, 28790, 8716, 6361, 4853, 17798, 21977, 19643, 20662, 10834, 20103,
		27067, 28634, 18623, 25849, 8576, 26234, 23887, 18228, 32587, 4836, 3306, 1811, 3035, 24559, 18399, 315,
		26766, 907, 24102, 12370, 9674, 2972, 10472, 16492, 22683, 11529, 27968, 30406, 13213, 2319, 23620, 16823,
		10013, 23772, 21567, 1251, 19579, 20313, 18241, 30130, 8402, 20807, 27354, 7169, 21211, 17293, 5410, 19223,
		10255, 22480, 27388, 9946, 15628, 24389, 17308, 2370, 9530, 31683, 25927, 23567, 11694, 26397, 32602, 15031,
		18255, 17582, 1422, 28835, 23607, 12597, 20602, 10138, 5212, 1252, 10074, 23166, 19823, 31667, 5902, 24630,
		18948, 14330, 14950, 8939, 23540, 21311, 22428, 22391, 3583, 29004, 30498, 18714, 4278, 2437, 22430, 3439,
		28313, 23161, 25396, 13471, 19324, 15287, 2563, 18901, 13103, 16867, 9714, 14322, 15197, 26889, 19372, 26241,
		31925, 14640, 11497, 8941, 10056, 6451, 28656, 10737, 13874, 17356, 8281, 25937, 1661, 4850, 7448, 12744,
		21826, 5477, 10167, 16705, 26897, 8839, 30947, 27978, 27283, 24685, 32298, 3525, 12398, 28726, 9475, 10208,
		617, 13467, 22287, 2376, 6097, 26312, 2974, 9114, 21787, 28010, 4725, 15387, 3274, 10762, 31695, 17320,
		18324, 12441, 16801, 27376, 22464, 7500, 5666, 18144, 15314, 31914, 31627, 6495, 5226, 31203, 2331, 4668,
		12650, 18275, 351, 7268, 31319, 30119, 7600, 2905, 13826, 11343, 13053, 15583, 30055, 31093, 5067, 761,
		9685, 11070, 21369, 27155, 3663, 26542, 20169, 12161, 15411, 30401, 7580, 31784, 8985, 29367, 20989, 14203,
		29694, 21167, 10337, 1706, 28578, 887, 3373, 19477, 14382, 675, 7033, 15111, 26138, 12252, 30996, 21409,
		25678, 18555, 13256, 23316, 22407, 16727, 991, 9236, 5373, 29402, 6117, 15241, 27715, 19291, 19888, 19847
};

unsigned int cNoSpread::U_Random( void ) 
{ 
	glSeed *= 69069; 
	glSeed += seed_table[ glSeed & 0xff ];

	return ( ++glSeed & 0x0fffffff ); 
} 

void cNoSpread::U_Srand( unsigned int seed )
{
	glSeed = seed_table[ seed & 0xff ];
}

int cNoSpread::UTIL_SharedRandomLong( unsigned int seed, int low, int high )
{
	unsigned int range;

	U_Srand( (int)seed + low + high );

	range = high - low + 1;
	if ( !(range - 1) )
	{
		return low;
	}
	else
	{
		int offset;
		int rnum;

		rnum = U_Random();

		offset = rnum % range;

		return (low + offset);
	}
}

float cNoSpread::UTIL_SharedRandomFloat( unsigned int seed, float low, float high )
{
	unsigned int range;

	U_Srand( (int)seed + *(int *)&low + *(int *)&high );

	U_Random();
	U_Random();

	range = (unsigned int)(high - low);
	if ( !range )
	{
		return low;
	}
	else
	{
		int tensixrand;
		float offset;

		tensixrand = U_Random() & 65535;

		offset = (float)tensixrand / 65536.0f;

		return (low + offset * range );
	}
}

float cNoSpread::GetVecSpread()
{
	if (vecflSpreadVar.size() == 0)
		return 0.0f;

	if (m_iRecoil < vecflSpreadVar.size())
	{
		return vecflSpreadVar[m_iRecoil];
	}

	return 0.0f;
}

void cNoSpread::AddSpreadVar(struct event_args_s *args)
{
	m_iRecoil++;

	float vecspread[2],vec[2];
	int future = 1;

	vec[0] = UTIL_SharedRandomFloat(m_uiRandom_Seed + 0 + future, -0.5, 0.5) + UTIL_SharedRandomFloat(m_uiRandom_Seed + 1 + future, -0.5, 0.5);
	vec[1] = UTIL_SharedRandomFloat(m_uiRandom_Seed + 2 + future, -0.5, 0.5) + UTIL_SharedRandomFloat(m_uiRandom_Seed + 3 + future, -0.5, 0.5);

	vecspread[0] = args->fparam1[0] / vec[0];
	vecspread[1] = args->fparam2[1] / vec[1];
	
	if (vecspread[0] < 0.0f)
		vecspread[0] *= -1.0f;

	if (vecspread[1] < 0.0f)
		vecspread[1] *= -1.0f;

	vecflSpreadVar.push_back(((vecspread[0] + vecspread[1])/2));
}

void cNoSpread::GetSpreadXY(float *vec)
{
	float vecspread, speed;

	vec[0] = UTIL_SharedRandomFloat(m_uiRandom_Seed + 1 + 0, -0.5, 0.5) + UTIL_SharedRandomFloat(m_uiRandom_Seed + 1 + 1, -0.5, 0.5);
	vec[1] = UTIL_SharedRandomFloat(m_uiRandom_Seed + 2 + 1, -0.5, 0.5) + UTIL_SharedRandomFloat(m_uiRandom_Seed + 3 + 1, -0.5, 0.5);

	vecspread = GetVecSpread();

	vec[0] *= vecspread;
	vec[1] *= vecspread;

	return;
}


void cNoSpread::GetSpreadOffset(float *inangles, float *outangles)
{
	float forward[3], right[3], up[3], vecDir[3];
	float view[3], dest[3], spread[2];

	gEngfuncs.pfnAngleVectors(inangles, forward, right, up);

	GetSpreadXY(spread);

	vecDir[0] = forward[0] + spread[0] * right[0] + spread[1] * up[0];
	view[0] = 8192 * vecDir[0];

	vecDir[1] = forward[1] + spread[0] * right[1] + spread[1] * up[1];
	view[1] = 8192 * vecDir[1];

	vecDir[2] = forward[2] + spread[0] * right[2] + spread[1] * up[2];
	view[2] = 8192 * vecDir[2];

	VectorAngles(view, dest);
	dest[0] *= -1;

	outangles[0] = inangles[0] - dest[0];
	outangles[1] = inangles[1] - dest[1];
	outangles[2] = 0;
}

void cNoSpread::VectorAngles(const float *forward, float *angles)
{
	float tmp, yaw, pitch;

	if (forward[1] == 0 && forward[0] == 0)
	{
		yaw = 0;
		pitch = 0;
	}
	else
	{
		yaw = atan2(forward[1], forward[0]) * 180 / M_PI;

		if (yaw < 0)
			yaw += 360;

		tmp = sqrt(forward[0] * forward[0] + forward[1] * forward[1]);

		pitch = atan2(forward[2], tmp) * 180 / M_PI;
	}

	angles[0] = pitch;
	angles[1] = yaw;
	angles[2] = 0;
}
void cNoSpread::DefaultSpreadVar(int weaponid)
{
	vecflSpreadVar.clear();
		if (weaponid == WEAPONLIST_DEAGLE)
			vecflSpreadVar.push_back(0.9f);
		else if (weaponid == WEAPONLIST_MP5)
			vecflSpreadVar.push_back(0.0f);
		else if (weaponid == WEAPONLIST_AK47)
			vecflSpreadVar.push_back(0.2f);
		else if (weaponid == WEAPONLIST_SG552)
			vecflSpreadVar.push_back(0.2f);
		else if (weaponid == WEAPONLIST_AUG)
			vecflSpreadVar.push_back(0.3f);
		else if (weaponid == WEAPONLIST_M4A1)
			vecflSpreadVar.push_back(0.2f);
		else if (weaponid == WEAPONLIST_M249)
			vecflSpreadVar.push_back(0.2f);
		else if (weaponid == WEAPONLIST_MAC10)
			vecflSpreadVar.push_back(0.15f);
		else if (weaponid == WEAPONLIST_UMP45)
			vecflSpreadVar.push_back(0.0f);
		else if (weaponid == WEAPONLIST_TMP)
			vecflSpreadVar.push_back(0.2f);
		else if (weaponid == WEAPONLIST_P90)
			vecflSpreadVar.push_back(0.15f);
		else if (weaponid == WEAPONLIST_P228)
			vecflSpreadVar.push_back(0.9f);
		else if (weaponid == WEAPONLIST_FIVESEVEN)
			vecflSpreadVar.push_back(0.92f);
		else if (weaponid == WEAPONLIST_ELITE)
			vecflSpreadVar.push_back(0.88f);
		else if (weaponid == WEAPONLIST_GLOCK18)
			vecflSpreadVar.push_back(0.9f);
		else if (weaponid == WEAPONLIST_USP)
			vecflSpreadVar.push_back(0.92f);
		else if (weaponid == WEAPONLIST_G3SG1)
			vecflSpreadVar.push_back(0.2f);
		else if (weaponid == WEAPONLIST_SG550)
			vecflSpreadVar.push_back(0.2f);
		else
			vecflSpreadVar.push_back (0.2f);
}
void cNoSpread::HUD_PostRunCmd(struct local_state_s *from, struct local_state_s *to, struct usercmd_s *cmd, int runfuncs, double time, unsigned int random_seed)
{
	static int prevammo = 0, curammo;
	int i, index, Id;

	if (runfuncs)
	{
		m_uiRandom_Seed = random_seed;

		if (cmd->buttons & IN_ATTACK && CanCurWeaponAttack()) // catch case when pistol and IN_ATTACK is always on and not firing
		{
			// there are some disco fans inhere to night
		}
		else if (!(cmd->buttons & (IN_ATTACK | IN_ATTACK2)))
		{
			if (me.spread.recoil > 15)
				me.spread.recoil = 15;

			if (IsCurWeaponSec())
			{
				m_iRecoil = 0;
			}
			else if (m_iRecoil > 0)
			{
				if (m_flRecoilTime <= time)
				{
					m_flRecoilTime = m_flRecoilTime + 0.0225;
					m_iRecoil--;
				}
			}
		}

		for (i=0;i<WeaponList.size();i++)
		{
			if (WeaponList[i].Id == to->client.m_iId)
			{
				if (!WeaponList[i].CurWeapon) // FIX: This doesn't catch when you have a weapon and you buy the same weapon
				{
					m_iRecoil = 0;
					DefaultSpreadVar(WeaponList[i].Id);
				}

				WeaponList[i].CurWeapon = true;
			}
			else
				WeaponList[i].CurWeapon = false;
		}

		for (i=0;i<MAX_WEAPONS;i++)
		{
			// this assumes (i == wd[i].m_iId)
			index = GetWeaponIndexByID(i);
			if (index == -1)
				continue;

			if (to->weapondata[i].m_iId)
				memcpy(&WeaponList[index].weapondata, &to->weapondata[i], sizeof(weapon_data_t));
			else
				memset(&WeaponList[index].weapondata, 0, sizeof(weapon_data_t));
		}

		if (IsReloading())
		{
			Id = GetCurWeaponId();
			m_iRecoil = 0;
			DefaultSpreadVar(Id);
		}
	}
}
#ifndef NOSPREAD_H
#define NOSPREAD_H
#include <Windows.h>
#include <vector>
#include "engine/allclientheaders.h"

class cNoSpread
{
	public:
		void GetSpreadOffset(float *inangles, float *outangles);	// to be called in cl_createmove
		void HUD_PostRunCmd(struct local_state_s *from, struct local_state_s *to, struct usercmd_s *cmd, int runfuncs, double time, unsigned int random_seed);// to be called POST HUD_POSTRUNCMD
		void DefaultSpreadVar(int weaponid);			// to be called on reload and weaponchange
		void AddSpreadVar(struct event_args_s *args);	// to be called in the weapon events

	private:
		int   m_iRecoil;
		float m_flRecoilTime;
		UINT  m_uiRandom_Seed;
		std::vector<float>vecflSpreadVar;
		float GetVecSpread( void );
		void GetSpreadXY(float *vec);
		void VectorAngles(const float *forward, float *angles);
		void U_Srand( unsigned int seed );
		unsigned int U_Random( void );
		int UTIL_SharedRandomLong( unsigned int seed, int low, int high );
		float UTIL_SharedRandomFloat( unsigned int seed, float low, float high );
};

#endif
#include <windows.h>
#include "engine/wrect.h"
#include "engine/cl_dll.h"
#include "engine/cl_entity.h"
#include "recoil.h"
#include "random.h"
#include "client.h"
#include "cvar.h"
#include "aimbot.h"
#include "attack.h"
#include "playeritems.h"
#pragma optimize("gtp",on)

void cNoSpread::GetSpreadXY(unsigned int seed, int future, float *velocity, float *vec)
{
	float vecspread, speed;

	vec[0] = UTIL_SharedRandomFloat(seed + future, -0.5, 0.5) + UTIL_SharedRandomFloat(seed + 1 + future, -0.5, 0.5);

	vec[1] = UTIL_SharedRandomFloat(seed + 2 + future, -0.5, 0.5) + UTIL_SharedRandomFloat(seed + 3 + future, -0.5, 0.5);

	speed = sqrt(velocity[0] * velocity[0] + velocity[1] * velocity[1]);

	vecspread = this->m_fSpread;

	vec[0] *= vecspread;
	vec[1] *= vecspread;

	return;
}
void VectorAngles( const float *forward, float *angles );
void cNoSpread::GetRecoilOffset(int future, float *inangles, float *velocity, float *outangles)
{
	float forward[3], right[3], up[3], vecDir[3];
	float view[3], dest[3], spread[2];

	gEngfuncs.pfnAngleVectors(inangles, forward, right, up);

	GetSpreadXY(m_uiSeed, future, velocity, spread);

	vecDir[0] = forward[0] + spread[0] * right[0] + spread[1] * up[0];
	view[0] = 8192 * vecDir[0];

	vecDir[1] = forward[1] + spread[0] * right[1] + spread[1] * up[1];
	view[1] = 8192 * vecDir[1];

	vecDir[2] = forward[2] + spread[0] * right[2] + spread[1] * up[2];
	view[2] = 8192 * vecDir[2];

	VectorAngles(view, dest);
	dest[0] *= -1;

	outangles[0] = inangles[0] - dest[0];
	outangles[1] = inangles[1] - dest[1];
	outangles[2] = 0;
}
#ifndef RECOIL_H
#define RECOIL_H
#include "windows.h"

class cNoSpread
{
public:
	void GetSpread(float fSpread)
	{
		if (fSpread == 0.0f)
		{
			m_fLastSpread = m_fcurrentSpread = m_fSpread = fSpread;
		}
		else
		{
			if (m_fLastSpread)
			{
				m_fSpread = m_fcurrentSpread - m_fLastSpread + fSpread;
				m_fLastSpread = m_fcurrentSpread;
				m_fcurrentSpread = fSpread;
			}
			else
			{
				m_fLastSpread = m_fcurrentSpread = m_fSpread = fSpread;
			}
		}
	};
	void SetSpreadtoZero()
	{
		m_fLastSpread = m_fcurrentSpread = m_fSpread = 0.0f;
	}
	void GetSeed(unsigned int uiSeed)
	{
		m_uiSeed = uiSeed;
	};
	void GetRecoilOffset(int future, float *inangles, float *velocity, float *outangles);
private:
	void GetSpreadXY(unsigned int seed, int future, float *velocity, float *vec);
	float m_fSpread;
	float m_fcurrentSpread;
	float m_fLastSpread;
	unsigned int m_uiSeed;
};

extern cNoSpread gNoSpread;
#endif
#pragma optimize("gtp",on)


#include "random.h"

static unsigned int glSeed = 0; 
unsigned int seed_table[ 256 ] =
{
	28985, 27138, 26457, 9451, 17764, 10909, 28790, 8716, 6361, 4853, 17798, 21977, 19643, 20662, 10834, 20103,
	27067, 28634, 18623, 25849, 8576, 26234, 23887, 18228, 32587, 4836, 3306, 1811, 3035, 24559, 18399, 315,
	26766, 907, 24102, 12370, 9674, 2972, 10472, 16492, 22683, 11529, 27968, 30406, 13213, 2319, 23620, 16823,
	10013, 23772, 21567, 1251, 19579, 20313, 18241, 30130, 8402, 20807, 27354, 7169, 21211, 17293, 5410, 19223,
	10255, 22480, 27388, 9946, 15628, 24389, 17308, 2370, 9530, 31683, 25927, 23567, 11694, 26397, 32602, 15031,
	18255, 17582, 1422, 28835, 23607, 12597, 20602, 10138, 5212, 1252, 10074, 23166, 19823, 31667, 5902, 24630,
	18948, 14330, 14950, 8939, 23540, 21311, 22428, 22391, 3583, 29004, 30498, 18714, 4278, 2437, 22430, 3439,
	28313, 23161, 25396, 13471, 19324, 15287, 2563, 18901, 13103, 16867, 9714, 14322, 15197, 26889, 19372, 26241,
	31925, 14640, 11497, 8941, 10056, 6451, 28656, 10737, 13874, 17356, 8281, 25937, 1661, 4850, 7448, 12744,
	21826, 5477, 10167, 16705, 26897, 8839, 30947, 27978, 27283, 24685, 32298, 3525, 12398, 28726, 9475, 10208,
	617, 13467, 22287, 2376, 6097, 26312, 2974, 9114, 21787, 28010, 4725, 15387, 3274, 10762, 31695, 17320,
	18324, 12441, 16801, 27376, 22464, 7500, 5666, 18144, 15314, 31914, 31627, 6495, 5226, 31203, 2331, 4668,
	12650, 18275, 351, 7268, 31319, 30119, 7600, 2905, 13826, 11343, 13053, 15583, 30055, 31093, 5067, 761,
	9685, 11070, 21369, 27155, 3663, 26542, 20169, 12161, 15411, 30401, 7580, 31784, 8985, 29367, 20989, 14203,
	29694, 21167, 10337, 1706, 28578, 887, 3373, 19477, 14382, 675, 7033, 15111, 26138, 12252, 30996, 21409,
	25678, 18555, 13256, 23316, 22407, 16727, 991, 9236, 5373, 29402, 6117, 15241, 27715, 19291, 19888, 19847
};

unsigned int U_Random( void ) 
{ 
	glSeed *= 69069; 
	glSeed += seed_table[ glSeed & 0xff ];
	return ( ++glSeed & 0x0fffffff ); 
} 

void U_Srand( unsigned int seed )
{
	glSeed = seed_table[ seed & 0xff ];
}

int UTIL_SharedRandomLong( unsigned int seed, int low, int high )
{
	unsigned int range;
	U_Srand( (int)seed + low + high );
	range = high - low + 1;
	if ( !(range - 1) )
	{
		return low;
	}
	else
	{
		int offset;
		int rnum;
		rnum = U_Random();
		offset = rnum % range;
		return (low + offset);
	}
}

float UTIL_SharedRandomFloat( unsigned int seed, float low, float high )
{
	unsigned int range;
	U_Srand( (int)seed + *(int *)&low + *(int *)&high );
	U_Random();
	U_Random();
	range = (unsigned int)(high - low);
	if ( !range )
	{
		return low;
	}
	else
	{
		int tensixrand;
		float offset;
		tensixrand = U_Random() & 65535;
		offset = (float)tensixrand / 65536.0f;
		return (low + offset * range );
	}
}
class CNoSpread
{
private:
    DWORD BaseGun;
    float Distance;
    int Flags;
    float FOV;
    UINT Seed;
    float Speed;
    float SpreadVar;
    int WeaponBit;
    int WeaponID;

private:
    float GetDistance(void);
    float GetVecSpread(void);

public:
    void Apply(float *OldAngles, float *CmdAngles);
    void Update(local_state_s *to, unsigned int random_seed);
};

extern CNoSpread gNoSpread;
CNoSpread gNoSpread;

float CNoSpread::GetDistance(void)
{
    // M3: 3000
    // Xm1014: 3048
    // ...
}

float CNoSpread::GetVecSpread(void)
{
    float VecSpread;

    switch (WeaponID)
    {
        case WEAPON_AK47:
        {
            if (!(Flags & FL_ONGROUND))
                VecSpread = SpreadVar * x + x;
            else if (Speed > 140.0f)
                VecSpread = SpreadVar * x + x;
            else
                VecSpread = SpreadVar * x;
            break;
        }
        ...
        default:
        {
            VecSpread = 0.0f;
            break;
        }
    }

    return VecSpread;
}

void CNoSpread::Apply(float *OldAngles, float *CmdAngles)
{
    float Forward[3], Right[3], Up[3], vecDir[3], vecEnd[3], NewAngles[3], Spread[2], VecSpread;

    Spread[0] = UTIL_SharedRandomFloat(Seed + 1, -0.5, 0.5) + UTIL_SharedRandomFloat(Seed + 2, -0.5, 0.5);
    Spread[1] = UTIL_SharedRandomFloat(Seed + 3, -0.5, 0.5) + UTIL_SharedRandomFloat(Seed + 4, -0.5, 0.5);

    VecSpread = GetVecSpread();

    Spread[0] *= VecSpread;
    Spread[1] *= VecSpread;

    gEngine.pfnAngleVectors(OldAngles, Forward, Right, Up);

    for (int i = 0; i < 3; i++)
    {
        vecDir[i] = Forward[i] + Spread[0] * Right[i] + Spread[1] * Up[i];
        vecEnd[i] = Distance * vecDir[i];
    }

    VectorAngles(vecEnd, NewAngles);
    NewAngles[0] = -NewAngles[0];

    CmdAngles[0] += OldAngles[0] - NewAngles[0];
    CmdAngles[1] += OldAngles[1] - NewAngles[1];
}

void CNoSpread::Update(local_state_s *to, unsigned int random_seed)
{
    Flags = to->client.flags;
    FOV = to->client.fov;
    Seed = random_seed;
    float Speed = to->client.velocity.Length();
    int WeaponID = to->client.m_iId;
    Distance = GetDistance();
    if (to->weapondata[WeaponID].m_flNextPrimaryAttack <= 0.0f)
    {
        BaseGun = *(DWORD*)(dwTableInit + 0x0);
        SpreadVar = *(float*)(BaseGun + 0xF8);
        WeaponBit = *(int*)(BaseGun + 0x128);
    }
}
 if (runfuncs) gNoSpread.Update(to, random_seed);
usercmd_t UserCmd;
void CL_CreateMove(float frametime, usercmd_s *cmd, int active)
{
    gClient.CL_CreateMove(frametime, cmd, active);
    RtlCopyMemory(&UserCmd, cmd, sizeof(UserCmd);
    ... // aimbot before nospread
    gNoSpread.Apply(UserCmd.viewangles, cmd->viewangles);
    ...
}
//HSPRITE						( *pfnSPR_Load )			( const char *szPicName );
HSPRITE SPR_Load(const char *szPicName)
{
	if(strstr(szPicName, "gas_puff_01"))
	{
		return 0;
	}
	//Log("PicName: %s", szPicName);
	return gEngfuncs.pfnSPR_Load(szPicName);
}
	if (pNearestEnt != NULL && fNearestAimTarget[0] > 0 && fNearestAimTarget[1] > 0)
	{
		// Define the aimsmooth factor
		#define AIM_SMOOTH 3

		// Is the right mousebutton actually pressed?
		if (GetAsyncKeyState(VK_RBUTTON))
		{
			//Calculate the interpolation
			float x = fNearestAimTarget[0] - iScreenCenterX;
			float y = fNearestAimTarget[1] - iScreenCenterY;

			x /= AIM_SMOOTH;
			y /= AIM_SMOOTH;

			fNearestAimTarget[0] = iScreenCenterX + x;
			fNearestAimTarget[1] = iScreenCenterY + y;

			//Aim on the target
			SetCursorPos((int)fNearestAimTarget[0], (int)fNearestAimTarget[1]);
		}
	}
void GetHeadPosition(cl_entity_t *pEnt)
{
    typedef float BoneMatrix_t[MAXSTUDIOBONES][3][4];
    model_t *pModel;
    studiohdr_t *pStudioHeader;
    BoneMatrix_t *pBoneMatrix;
    Vector vBBMin = Vector(0, 0, 0);
    Vector vBBMax = Vector(0, 0, 0);
    mstudiobbox_t *pHitbox;
	Vector vAimOffs = Vector(0, 0, 0);
    vAimOffs[0] = cvar.hbx;
	vAimOffs[1] = cvar.hby;
	vAimOffs[2] = cvar.hbz;
	int i;
    if(!vPlayers[pEnt->index].bGotHead)
    {
        pModel = pstudio->SetupPlayerModel(pEnt->index);
        pStudioHeader = (studiohdr_t*)pstudio->Mod_Extradata(pModel);
        pBoneMatrix = (BoneMatrix_t*)pstudio->StudioGetBoneTransform();
		aimvec av;                   // This is an aimvec structure the aimbot traditionally uses.
		vPlayers[pEnt->index].Hitbox.clear(); // This is the array of hitboxes, we're clearing it so we have fresh aiming spots.
        pHitbox = (mstudiobbox_t*)((byte*)pStudioHeader + pStudioHeader->hitboxindex);
		i = cvar.hitbox;
		if(cvar.hitbox>20){cvar.hitbox=11;}
		if(i>=0)
		{
			VectorTransform(pHitbox[i].bbmin, (*pBoneMatrix)[pHitbox[i].bone], vBBMin);
	        VectorTransform(pHitbox[i].bbmax, (*pBoneMatrix)[pHitbox[i].bone], vBBMax);
			vPlayers[pEnt->index].vPlayerHead = (vBBMax + vBBMin)*0.5f - vAimOffs;
			vPlayers[pEnt->index].bGotHead = true;
			VectorSubtract(vPlayers[pEnt->index].vPlayerHead, vPlayers[pEnt->index].getEnt()->origin, vPlayers[pEnt->index].vPlayerHead);
			av.h = vPlayers[pEnt->index].vPlayerHead[2]; // using the head hitbox as the first point in our aimvec array, so it takes precedence over others.
			av.f = vPlayers[pEnt->index].vPlayerHead[1];
			av.r = vPlayers[pEnt->index].vPlayerHead[0];
			vPlayers[pEnt->index].Hitbox.push_back(av); // this is where the actual adding occurs.
			if(cvar.autodetect && gAimbot.target==-1) // is ad enabled and why calculate further if I have a target already?
			{
				for(int q=1;q<20;q++)
				{
					float curspot[3];
					VectorTransform(pHitbox[q].bbmin, (*pBoneMatrix)[pHitbox[q].bone], vBBMin);
					VectorTransform(pHitbox[q].bbmax, (*pBoneMatrix)[pHitbox[q].bone], vBBMax);
					VectorCopy((vBBMax + vBBMin) * 0.5f, curspot );
					vPlayers[pEnt->index].bAimSpot[q] = true;
					VectorSubtract(curspot,vPlayers[pEnt->index].getEnt()->origin,curspot);
// The above is just the same thing the function does, finding the middle of the bounding box and subtracting.
					av.h = curspot[2]; // these are other hitboxes
					av.f = curspot[1]; // we want to add for autodetect
					av.r = curspot[0];
					vPlayers[pEnt->index].Hitbox.push_back(av); // this actually adds the hitbox's position to the aimvec structure Hitbox in the VecPlayers class, or vPlayers.
				}
			}
			Vector vCubePoints[8];
			Vector vCubePointsTrans[8];
			vCubePoints[0] = pHitbox[i].bbmin;
			vCubePoints[1] = Vector(pHitbox[i].bbmin.x, pHitbox[i].bbmax.y, pHitbox[i].bbmin.z);
			vCubePoints[2] = Vector(pHitbox[i].bbmax.x, pHitbox[i].bbmax.y, pHitbox[i].bbmin.z);
			vCubePoints[3] = Vector(pHitbox[i].bbmax.x, pHitbox[i].bbmin.y, pHitbox[i].bbmin.z);
			vCubePoints[4] = pHitbox[i].bbmax;
			vCubePoints[5] = Vector(pHitbox[i].bbmin.x, pHitbox[i].bbmax.y, pHitbox[i].bbmax.z);
			vCubePoints[6] = Vector(pHitbox[i].bbmin.x, pHitbox[i].bbmin.y, pHitbox[i].bbmax.z);
			vCubePoints[7] = Vector(pHitbox[i].bbmax.x, pHitbox[i].bbmin.y, pHitbox[i].bbmax.z);
	
		    for(int j = 0; j < 8; j++)
			    VectorTransform(vCubePoints[j], (*pBoneMatrix)[pHitbox[i].bone], vCubePointsTrans[j]);

			if(cvar.drawhitbox)
			{
				glDisable(GL_TEXTURE_2D);
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				ColorEntry *clr;
				clr = PlayerColor(pEnt->index);
				glColor4f(clr->onebased_r,clr->onebased_g,clr->onebased_b,clr->onebased_a);
				glLineWidth(0.15f);
				glBegin(GL_LINE_LOOP);
				glVertex3fv(vCubePointsTrans[0]);
				glVertex3fv(vCubePointsTrans[1]);
				glVertex3fv(vCubePointsTrans[2]);
				glVertex3fv(vCubePointsTrans[3]);
				glEnd();
				glBegin(GL_LINE_LOOP);
				glVertex3fv(vCubePointsTrans[4]);
				glVertex3fv(vCubePointsTrans[5]);
				glVertex3fv(vCubePointsTrans[6]);
				glVertex3fv(vCubePointsTrans[7]);
				glEnd();
				glBegin(GL_LINES);
				glVertex3fv(vCubePointsTrans[0]);
				glVertex3fv(vCubePointsTrans[6]);
				glVertex3fv(vCubePointsTrans[1]);
				glVertex3fv(vCubePointsTrans[5]);
				glVertex3fv(vCubePointsTrans[2]);
				glVertex3fv(vCubePointsTrans[4]);
				glVertex3fv(vCubePointsTrans[3]);
				glVertex3fv(vCubePointsTrans[7]);
				glEnd();
			    glDisable(GL_BLEND);
				glEnable(GL_TEXTURE_2D);
			}
		}
	}
"*" "Anti-Recoil"
{
}
{
"*" "Mouse 1" "bind mouse1 +attack"
"*" "Mouse 2" "bind mouse2 +attack"
"*" "Mouse 3" "bind mouse3 +attack"
"*" "Reset Mouse 1" "bind mouse1 +attack"
"*" "Reset Mouse 2" "bind mouse2 +attack2"
"*" "Reset Mouse 3" "unbind mouse3"
}
{
"*" "Weak" "cl_pitchspeed 1.0"
"*" "Medium" "cl_pitchspeed 2.5"
"*" "Strong" "cl_pitchspeed 3.5"
}
{
"*" "Deagle Ownage" "cl_pitchspeed 1.1"
"*" "MP5 Ownage" "cl_pitchspeed 1.4"
"*" "P90 Ownage" "cl_pitchspeed 1.9"
"*" "AK-47 Ownage" "cl_pitchspeed 2.7"
"*" "M4A1 Ownage" "cl_pitchspeed 2.2"
"*" "M249 Ownage" "cl_pitchspeed 1.4"
}
{
"*" "Recoil 1.0" "cl_pitchspeed 1.0"
"*" "Recoil 1.5" "cl_pitchspeed 1.5"
"*" "Recoil 2.0" "cl_pitchspeed 2.0"
"*" "Recoil 2.5" "cl_pitchspeed 2.5"
"*" "Recoil 3.0" "cl_pitchspeed 3.0"
"*" "Recoil 3.5" "cl_pitchspeed 3.5"
"*" "Recoil 4.0" "cl_pitchspeed 4.0"
"*" "Recoil 4.5" "cl_pitchspeed 4.5"
"*" "Recoil 5.0" "cl_pitchspeed 5.0"
"*" "Recoil 5.5" "cl_pitchspeed 5.5"
"*" "Recoil 6.0" "cl_pitchspeed 6.0"
}
{
"*" "Deagle Pack" "deagle; secammo; cl_pitchspeed 1.1"
"*" "MP5 Pack" "mp5; primammo; cl_pitchspeed 1.4"
"*" "P90 Pack" "p90; primammo; cl_pitchspeed 1.9"
"*" "AK-47 Pack" "ak47; primammo; cl_pitchspeed 2.7"
"*" "M4A1 Pack" "m4a1; primammo; cl_pitchspeed 2.2"
"*" "M249 Pack" "m249; primammo; cl_pitchspeed 1.4"
}

recoil_usp "recoil 1.3;nospread 2"
recoil_glock18 "recoil 1.3;nospread 2"
recoil_deagle "recoil 1.3;nospread 2"
recoil_p228 "recoil 1.3;nospread 2"
recoil_elite "recoil 1.3;nospread 2"
recoil_fiveseven "recoil 1.3;nospread 2"
recoil_xm1014 "recoil 1.3;nospread 2"
recoil_m3 "recoil 1.3;nospread 2"
recoil_mp5 "recoil 1.3;nospread 2"
recoil_tmp "recoil 1.2;nospread 2"
recoil_p90 "recoil 1.2;nospread 2"
recoil_mac10 "recoil 1.2;nospread 2"
recoil_ump45 "recoil 1.2;nospread 2"
recoil_ak47 "recoil 1.9;nospread 2"
recoil_sg552 "recoil 1.8;nospread 2"
recoil_m4a1 "recoil 1.74;nospread 2"
recoil_galil "recoil 1.2;nospread 2"
recoil_famas "recoil 1.2;nospread 2"
recoil_forumqs "recoil 1.2;nospread 2"
recoil_aug "recoil 1.7;nospread 2"
recoil_scout "recoil 1.2;nospread 2"
recoil_awp "recoil 1.3;nospread 2"
recoil_g3sg1 "recoil 1.2;nospread 2"
recoil_qsforum "recoil 2;nospread 2"
recoil_sg550 "recoil 1.2;nospread 2"
recoil_m249 "recoil 1.7;nospread 2"
recoil_knife "recoil 1.2;nospread 2"
recoil_tactical "recoil 1.3;nospread 2"
recoil_flashbang " "
recoil_hegrenade " "
recoil_smokegrenade " "
recoil_c4 " "

recoilSw_usp "recoil 0.27"
recoilSw_glock18 "recoil 0.25"
recoilSw_deagle "recoil 0.16"
recoilSw_p228 "recoil 0.37"
recoilSw_elite "recoil 0.39"
recoilSw_fiveseven "recoil 0.42"
recoilSw_xm1014 "recoil 1.8"
recoilSw_m3 "recoil 1.83"
recoilSw_mp5 "recoil 1.6892"
recoilforum_qs "recoil 1.213"
recoilSw_FamaS "recoil 1.32"
recoilSw_tmp "recoil 1.66"
recoilSw_p90 "recoil 1.709"
recoilSw_mac10 "recoil 1.71"
recoilSw_ump45 "recoil 1.72"
recoilSw_ak47 "recoil 1.710201"
recoilSw_sg552 "recoil 1.739"
recoilSw_m4a1 "recoil 1.62"
recoilSw_aug "recoil 1.718"
recoilSw_scout "recoil 1.7"
recoilSw_awp "recoil 1.77"
recoilSw_g3sg1 "recoil 0.018"
recoilSw_sg550 "recoil 0.027"
recoilSw_m249 "recoil 1.82"
recoilSw_knife "recoil 0.282"
recoilSw_flashbang "recoil 1.282"
recoilSw_hegrenade "recoil 1.282"
recoilSw_smokegrenade "recoil 1.282"
recoilSw_c4 "recoil 0.0"
recoilSw_tactical "recoil 0.282"
recoilSw_ "recoil 0.302"

recoil_add GLOCK 1.250000
recoil_add P228 1.110000
recoil_add DEAGLE 1.054200
recoil_add FIVE-SEVEN 1.023000
recoil_add 12-GUAGE 1.500000
recoil_add LEONE 1.500000
recoil_add TMP 0.800000
recoil_add MAC10 1.580000
recoil_add MP5 1.425000
recoil_add UMP45 1.295000
recoil_add P90 1.590000
recoil_add GALIL 1.400000
recoil_add AK47 1.900000
recoil_add SCOUT 1.470000
recoil_add SG552 1.600000
recoil_add AWP 0.870000
recoil_add G3SG1 0.100000
recoil_add M249 1.705000
recoil_add M4A1 1.870000
recoil_add FAMAS 1.175000
recoil_add AUG 1.748000
recoil_add SG550 1.800000
recoil_add recoil 0.000000
recoil_add GLOCK 0.300000
recoil_add P228 0.110000
recoil_add DEAGLE 0.034200
recoil_add FIVE-SEVEN 0.023000
recoil_add 12-GUAGE 1.500000
recoil_add LEONE 1.500000
recoil_add TMP 0.800000
recoil_add MAC10 1.580000
recoil_add MP5 1.425000
recoil_add UMP45 1.295000
recoil_add P90 1.590000
recoil_add GALIL 1.400000
recoil_add AK47 1.700000
recoil_add SCOUT 1.470000
recoil_add SG552 1.600000
recoil_add AWP 0.800000
recoil_add G3SG1 0.100000
recoil_add M249 1.705000
recoil_add M4A1 1.550000
recoil_add FAMAS 1.035000
recoil_add AUG 1.748000
recoil_add SG550 0.800000

wwclconfig_check recoilSw_usp "recoil 0.27"
wwclconfig_check recoilSw_glock18 "recoil 0.25"
wwclconfig_check recoilSw_deagle "recoil 0.16"
wwclconfig_check recoilSw_p228 "recoil 0.37"
wwclconfig_check recoilSw_elite "recoil 0.39"
wwclconfig_check recoilSw_fiveseven "recoil 0.42"
wwclconfig_check recoilSw_xm1014 "recoil 1.8"
wwclconfig_check recoilSw_m3 "recoil 1.83"
wwclconfig_check recoilSw_mp5 "recoil 1.6892"
wwclconfig_check recoilSw_FamaS "recoil 1.32"
wwclconfig_check recoilSw_tmp "recoil 1.66"
wwclconfig_check recoilSw_p90 "recoil 1.709"
wwclconfig_check recoilSw_mac10 "recoil 1.71"
wwclconfig_check recoilSw_ump45 "recoil 1.72"
wwclconfig_check recoilSw_ak47 "recoil 1.710201"
wwclconfig_check recoilSw_sg552 "recoil 1.739"
wwclconfig_check recoilSw_m4a1 "recoil 1.62"
wwclconfig_check recoilSw_aug "recoil 1.718"
wwclconfig_check recoilSw_scout "recoil 1.7"
wwclconfig_check recoilSw_awp "recoil 1.77"
wwclconfig_check recoilSw_g3sg1 "recoil 0.018"
wwclconfig_check recoilSw_sg550 "recoil 0.027"
wwclconfig_check recoilSw_m249 "recoil 1.82"
wwclconfig_check recoilSw_knife "recoil 0.282"
wwclconfig_check recoilSw_flashbang "recoil 1.282"
wwclconfig_check recoilSw_hegrenade "recoil 1.282"
wwclconfig_check recoilSw_smokegrenade "recoil 1.282"
wwclconfig_check recoilSw_c4 "recoil 0.0"
wwclconfig_check recoilSw_tactical "recoil 0.282"
wwclconfig_check recoilSw_ "recoil 0.302"


clear

name "I Love You Karina <3"

echo ".:: by sercan(deEA ;x d3GR~DiuL1) ::." 
echo ".:: Karina CFG Активный/Active ::."
echo ".:: я люблю тебя Карина <3 ::."
echo ".:: sercandeveloper@outlook.com.tr ::."
echo ".:: chat.whatsapp.com/HtLypvY61FBK6C5kY58cPA ::."

AIMBOT=1
RECOIL=1
KNIFEAIM=1
SHOOT=1
NORECOIL=1
NOSPREAD=2
AIRSHOT=1